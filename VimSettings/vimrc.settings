" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
execute pathogen#infect()
filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"****************************************
        "New file title
"****************************************
autocmd BufNewFile *.py call SetPythonHeader()
autocmd BufNewFile *.hpp,*.cpp,,*.cc,*.[ch],*.sh,*.java call SetHeader()
let $author_name = "b51"
let $author_email = "b51live@gmail.com"

function! SetHeader()
  "*.sh
  if &filetype == 'sh'
    call setline(1,"\#########################################################################")
    call append(line("."), "\#")
    call append(line(".")+1, "\#              Author: ".$author_name)
    call append(line(".")+2, "\#                Mail: ".$author_email)
    call append(line(".")+3, "\#            FileName: ".expand("%:t"))
    call append(line(".")+4, "\#")
    call append(line(".")+5, "\#          Created On: ".strftime("%c"))
    call append(line(".")+6, "\#")
    call append(line(".")+7, "\#########################################################################")
    call append(line(".")+8, "")
    call append(line(".")+9, "\#!/bin/bash")
    call append(line(".")+10, "")
  else
    call setline(1,"/*************************************************************************")
    call append(line("."), "\*")
    call append(line(".")+1, "\*              Author: ".$author_name)
    call append(line(".")+2, "\*                Mail: ".$author_email)
    call append(line(".")+3, "\*            FileName: ".expand("%:t"))
    call append(line(".")+4, "\*")
    call append(line(".")+5, "\*          Created On: ".strftime("%c"))
    call append(line(".")+6, "\*     Licensed under The MIT License [see LICENSE for details]")
    call append(line(".")+7, "\*")
    call append(line(".")+8, "************************************************************************/")
    call append(line(".")+9, "")
  endif
  "*.cpp
  if &filetype == 'cpp'
    call append(line(".")+10, "#include <iostream>")
    call append(line(".")+11, "")
  endif
  "*.cc
  if &filetype == 'cc'
    call append(line(".")+10, "#include <iostream>")
    call append(line(".")+11, "")
  endif
  "*.c
  if &filetype == 'c'
    call append(line(".")+10, "#include <stdio.h>")
    call append(line(".")+11, "")
  endif
  "Goto end of file
  "autocmd BufEnter * normal G
endfunc

function! SetPythonHeader()
  call setline(1,"\#!/usr/bin/env python")
  call append(line("."), "\#########################################################################")
  call append(line(".")+1, "\#")
  call append(line(".")+2, "\#              Author: ".$author_name)
  call append(line(".")+3, "\#                Mail: ".$author_email)
  call append(line(".")+4, "\#            FileName: ".expand("%:t"))
  call append(line(".")+5, "\#")
  call append(line(".")+6, "\#          Created On: ".strftime("%c"))
  call append(line(".")+7, "\#     Licensed under The MIT License [see LICENSE for details]")
  call append(line(".")+8, "\#")
  call append(line(".")+9, "\#########################################################################")
  call append(line(".")+10, "")
  "autocmd BufEnter * normal G
endfunc

"****************************************
        "taglist config
"****************************************
if getfsize(".vimscript")>0
    source .vimscript
endif

let Tlist_Exit_OnlyWindow=1
"let Tlist_Auto_Open=1
let Tlist_File_Fold_Auto_Close=1
let Tlist_Use_Right_Window=1
nnoremap <silent> <F8> :TlistToggle<CR>

"****************************************
        "cscope config
"****************************************
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  " else add the database pointed to by environment variable
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
endfunction
au BufEnter /* call LoadCscope()

nmap <Leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>I :cs find i <C-R>=expand("<cfile>")<CR><CR>
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
nnoremap <C-]> g<C-]>

"****************************************
        "NERDTREE config"
"****************************************
"autocmd vimenter * NERDTree
wincmd w
autocmd vimenter * wincmd w
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Highlight current line
"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
"set cursorline cursorcolumn
set cursorcolumn

"****************************************
        "powerline settings
"****************************************
"set guifont=PowerlineSymbols\ for\ Powerline
"set nocompatible
"set laststatus=2
"set t_Co=256
"let g:Powerline_symbols = 'fancy'
"let Powerline_symbols='compatible'

"****************************************
        "airline settings
"****************************************
"let g:airline_theme="hybridline"
let g:airline_theme="dracula"
set laststatus=2
set t_Co=256
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_nr_show = 1
nnoremap <C-TAB> :bn<CR>
nnoremap <C-S-TAB> :bp<CR>
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols_branch = '⎇'

"****************************************
        "vim-fugitive config"
"****************************************
"set laststatus=2 " Always display the status line
"set statusline+=%{fugitive#statusline()} "  Git Hotness

"****************************************
        "tagbar settings
"****************************************
"let g:tagbar_width=35
"let g:tagbar_autofocus=1
"nmap <F8> :TagbarToggle<CR>

"****************************************
        "ctrlp settings:
"****************************************
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|public\|build$|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }
"let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
"
"****************************************
        "ctrlp-funky settings:
"****************************************
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

"****************************************
        "ag settings:
"****************************************
let g:ag_working_path_mode="r"
nmap <F2> :Ag! --noaffinity<space>

"****************************************
        "syntastic settings:
"****************************************
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 1
let g:syntastic_python_checkers = ['pyflakes']
"nmap<F10> :SyntasticToggleMode<CR>

"****************************************
        "markdown preview:
"****************************************
nmap <F9>o :MarkdownPreview<CR>
nmap <F9>q :MarkdownPreviewStop<CR>

function! SetupPython()
  setlocal softtabstop=4
  setlocal tabstop=4
  setlocal shiftwidth=4
endfunction
command! -bar SetupPython call SetupPython()

"****************************************
            "vimwiki"
"****************************************
let g:vimwiki_list = [{'path': '~/Documents/VimWiki/', 'syntax': 'markdown', 'ext': '.wiki'}]
au BufRead, BufNewFile *.wiki set filetype=vimwiki
function! ToggleCalendar()
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction
:autocmd FileType vimwiki map <Leader>c :call ToggleCalendar()<CR>
:nnoremap <F7> "=strftime("%Y-%m-%d")<CR>P
:inoremap <F7>t <C-R>=strftime("%Y-%m-%d")<CR>
":autocmd FileType vimwiki map c :Calendar<CR>

"****************************************
            "Calendar"
"****************************************
autocmd bufenter * if (winnr("$") == 1 && exists("b:Calendar")) | q | endif

"****************************************
            "vim-mark"
"****************************************
let g:mwDefaultHighlightingPalette = 'extended'

"****************************************
            "google vim codefmt"
"****************************************
"augroup autoformat_settings
"  autocmd FileType bzl AutoFormatBuffer buildifier
"  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
"  autocmd FileType dart AutoFormatBuffer dartfmt
"  autocmd FileType go AutoFormatBuffer gofmt
"  autocmd FileType gn AutoFormatBuffer gn
"  autocmd FileType html,css,json AutoFormatBuffer js-beautify
"  autocmd FileType java AutoFormatBuffer google-java-format
"  autocmd FileType python AutoFormatBuffer yapf
"  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
"augroup END

"****************************************
            "ultisnips"
"****************************************
let $snipath = $HOME."/.vim/ultisnips"
let g:UltiSnipsSnippetDirectories = [$snipath]
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-m>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"****************************************
            "YouCompleteMe"
"****************************************
let g:cm_server_python_interpreter='/usr/local/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
let g:ycm_enable_diagnostic_highlighting=0
let g:ycm_add_preview_to_completeopt=0

"****************************************
            "normal"
"****************************************
set nu
set hlsearch
set noautoindent
set ruler
syntax enable
syntax on

"****************************************
               "fzf"
"****************************************
set rtp+=/usr/local/opt/fzf

"****************************************
            "colorscheme"
"****************************************
"------ solarized ------
"set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized

"------ dracula ------
"let g:dracula_colorterm = 0
"colorscheme dracula

"------ molokai ------
colorscheme molokai

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/vendor

set shiftwidth=2
set softtabstop=2
set tabstop=2
set cindent
set expandtab
set autochdir
set showcmd
set smartcase
set smartindent
set pastetoggle=<F12>
let g:indentLine_char = '︙'
set tags=./tags,tags;
set runtimepath^=~/.vim/bundle/ag.vim
set complete=.,w,b,u,t

set encoding=utf-8
